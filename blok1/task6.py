

# Часть 6. Дополнительно

# Найдите и скопируйте алгоритм бинарного поиска. Запустите код и попробуйте разобраться как он работает


# def binary_search(arr, target):
#     low = 0  # начальная граница поиска
#     high = len(arr) - 1  # конечная граница поиска
    
#     while low <= high:  # продолжаем поиск, пока границы не пересекутся
#         mid = (low + high) // 2  # находим середину диапазона
        
#         # Проверяем, находится ли искомый элемент в середине
#         if arr[mid] == target:
#             return mid  # элемент найден, возвращаем индекс
#         # Если искомый элемент меньше, идем влево
#         elif arr[mid] > target:
#             high = mid - 1  # сдвигаем верхнюю границу влево
#         # Если искомый элемент больше, идем вправо
#         else:
#             low = mid + 1  # сдвигаем нижнюю границу вправо
    
#     # Если элемент не найден
#     return -1

# # Отсортированный массив для поиска
# arr = [2, 4, 7, 8, 10, 15, 18, 20, 23]

# # Искомый элемент
# target = 15

# # Вызываем функцию binary_search и сохраняем результат
# result = binary_search(arr, target)

# # Проверяем результат
# if result != -1:
#     print(f"Элемент {target} найден по индексу {result}.")
# else:
#     print(f"Элемент {target} не найден.")



# def bubble_sort(arr):
#     n = len(arr)
    
#     # Проходим через все элементы массива
#     for i in range(n):
#         # Внутренний цикл для сравнения элементов
#         for j in range(0, n-i-1):
#             # Меняем местами, если следующий элемент меньше текущего
#             if arr[j] > arr[j+1]:
#                 arr[j], arr[j+1] = arr[j+1], arr[j]
    
#     return arr

# # Пример использования
# arr = [64, 34, 25, 12, 22, 11, 90]
# sorted_arr = bubble_sort(arr)

# print("Отсортированный массив:", sorted_arr)


